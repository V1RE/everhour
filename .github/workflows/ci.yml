name: CI

on:
  push:
  pull_request:

concurrency:
  group: ci-${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  # Run the `rustfmt` code formatter
  rustfmt:
    name: Rustfmt [Formatter]
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2

      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt

      - name: Build | Format
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy [Linter]
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v1

      - name: Setup | libdbus (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libdbus-1-dev

      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy

      - name: Build | Lint
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --locked --all-targets --all-features -- -D clippy::all

  # Ensure that the project could be successfully compiled
  cargo_check:
    name: Compile
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v1

      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build | Check
        run: cargo check --workspace --locked

  # Run tests on Linux, macOS, and Windows
  # On both Rust stable and Rust nightly
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: cargo_check # First check then run expansive tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rust: [stable, nightly]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v1

      # Install all the required dependencies for testing
      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      # Run the ignored tests that expect the above setup
      - name: Build | Test
        run: cargo test --workspace --locked --all-features -- --include-ignored
  coverage:
    name: Coverage
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: llvm-tools-preview
          override: true
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install llvm-cov
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-llvm-cov
          version: 0.1.0-alpha.4
          use-tool-cache: true
      - name: Coverage
        uses: actions-rs/cargo@v1
        with:
          command: llvm-cov
          args: --lcov --output-path lcov.info
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: lcov.info
          github-token: ${{ secrets.github_token }}
